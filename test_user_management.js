const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000';

// Fun√ß√£o para fazer login
async function login(email, password) {
  try {
    const response = await axios.post(`${API_BASE_URL}/api/auth/login`, {
      email,
      password
    });
    return response.data.data.token;
  } catch (error) {
    console.error('Erro no login:', error.response?.data || error.message);
    return null;
  }
}

// Fun√ß√£o para testar cria√ß√£o de usu√°rio
async function testCreateUser(token) {
  try {
    const response = await axios.post(`${API_BASE_URL}/api/users`, {
      name: 'Usu√°rio Teste',
      email: 'teste@easyholmes.com',
      password: '123456',
      role: 'user'
    }, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    console.log('‚úÖ Usu√°rio criado com sucesso:', response.data);
    return response.data.data;
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio:', error.response?.data || error.message);
    return null;
  }
}

// Fun√ß√£o para testar busca de usu√°rios
async function testGetUsers(token) {
  try {
    const response = await axios.get(`${API_BASE_URL}/api/users`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    console.log('‚úÖ Usu√°rios encontrados:', response.data.data.length);
    return response.data.data;
  } catch (error) {
    console.error('‚ùå Erro ao buscar usu√°rios:', error.response?.data || error.message);
    return null;
  }
}

// Fun√ß√£o para testar atualiza√ß√£o de usu√°rio
async function testUpdateUser(token, userId) {
  try {
    const response = await axios.put(`${API_BASE_URL}/api/users/${userId}`, {
      name: 'Usu√°rio Teste Atualizado',
      email: 'teste.atualizado@easyholmes.com',
      role: 'admin'
    }, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    console.log('‚úÖ Usu√°rio atualizado com sucesso:', response.data);
    return response.data.data;
  } catch (error) {
    console.error('‚ùå Erro ao atualizar usu√°rio:', error.response?.data || error.message);
    return null;
  }
}

// Fun√ß√£o para testar dele√ß√£o de usu√°rio
async function testDeleteUser(token, userId) {
  try {
    const response = await axios.delete(`${API_BASE_URL}/api/users/${userId}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    console.log('‚úÖ Usu√°rio deletado com sucesso:', response.data);
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao deletar usu√°rio:', error.response?.data || error.message);
    return false;
  }
}

// Fun√ß√£o principal de teste
async function runTests() {
  console.log('üöÄ Iniciando testes do gerenciamento de usu√°rios...\n');

  // 1. Login como admin
  console.log('1. Fazendo login como admin...');
  const token = await login('admin@easyholmes.com', 'admin123');
  if (!token) {
    console.error('‚ùå Falha no login. Abortando testes.');
    return;
  }
  console.log('‚úÖ Login realizado com sucesso\n');

  // 2. Buscar usu√°rios existentes
  console.log('2. Buscando usu√°rios existentes...');
  const existingUsers = await testGetUsers(token);
  console.log('');

  // 3. Criar novo usu√°rio
  console.log('3. Criando novo usu√°rio...');
  const newUser = await testCreateUser(token);
  console.log('');

  if (newUser) {
    // 4. Atualizar usu√°rio
    console.log('4. Atualizando usu√°rio...');
    await testUpdateUser(token, newUser.id);
    console.log('');

    // 5. Deletar usu√°rio
    console.log('5. Deletando usu√°rio...');
    await testDeleteUser(token, newUser.id);
    console.log('');
  }

  // 6. Buscar usu√°rios novamente
  console.log('6. Buscando usu√°rios ap√≥s opera√ß√µes...');
  await testGetUsers(token);
  console.log('');

  console.log('üéâ Testes conclu√≠dos!');
}

// Executar testes
runTests().catch(console.error); 